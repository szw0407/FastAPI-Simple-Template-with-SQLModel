from passlib.context import CryptContext
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from jose import JWTError, jwt
from datetime import timedelta, timezone, datetime
from fastapi import Depends, HTTPException, status

from .models import *

SECRET_KEY = "c674ba1e5c057da1daa5aafe9c0613ea8104ca91f18ede550cd562f9bc41c38c"
# the above key is generated by openssl
ALGORITHM = "HS256" # HS256 is a hash algorithm, others include HS384 and HS512
ACCESS_TOKEN_EXPIRE_MINUTES = 15
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)
def get_password_hash(password):
    return pwd_context.hash(password)

async def get_user_by_email(email: str) -> User:
    with Session(engine) as session:
        statement = select(User).where(User.email == email)
        result: User = session.exec(statement).one()
        return result
async def authenticate_user(email: str, password: str):
    """
    To authenticate user

    :param email: user email
    :param password: user password
    :return: user if authenticated, else False
    """
    user: User = await get_user_by_email(email)  # due to the async nature, we need to await the result
    if not user:
        return False
    if not verify_password(password, user.password):
        return False
    return user

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token") 


def create_access_token(data: dict, expires_delta: timedelta| None = None):
    """
    Create access token for authentication

    > This can just be copy and paste
    """
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.now(timezone.utc) + expires_delta
    else:
        expire = datetime.now(timezone.utc) + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt


async def get_current_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload:dict[str, str | None] = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str | None = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except JWTError:
        raise credentials_exception
    user = await get_user_by_email(email=token_data.username)
    if user is None:
        raise credentials_exception
    return user

async def get_current_active_user(current_user: UserRead = Depends(get_current_user)) -> UserRead:
    return current_user

